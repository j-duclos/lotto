from collections import defaultdict 

dataset = [
    [1, 3, 7, 16, 66, 5], [30, 36, 49, 52, 63, 16], [6, 19, 28, 44, 60, 10], [36, 42, 50, 52, 67, 26], [3, 18, 27, 36, 53, 12], [16, 26, 29, 38, 50, 6], [24, 29, 42, 51, 54, 16], [3, 8, 40, 53, 58, 3], [4, 27, 33, 41, 42, 14], [4, 23, 45, 50, 53, 17], [6, 28, 59, 62, 69, 21], [1, 4, 45, 47, 67, 18], [17, 36, 43, 53, 67, 14], [27, 28, 34, 37, 44, 8], [12, 21, 62, 67, 69, 17], [1, 2, 27, 30, 67, 9], [9, 11, 27, 59, 66, 19], [15, 18, 19, 41, 43, 14], [39, 41, 43, 49, 64, 4], [7, 38, 65, 66, 68, 21], [1, 5, 32, 50, 64, 8], [24, 25, 43, 52, 63, 21], [16, 31, 34, 47, 65, 10], [18, 22, 43, 61, 65, 2], [13, 30, 35, 49, 59, 4], [13, 31, 33, 51, 58, 15], [25, 40, 43, 48, 50, 11], [7, 17, 28, 40, 45, 2], [4, 31, 34, 38, 61, 13], [30, 31, 38, 48, 68, 8], [12, 21, 42, 44, 49, 1], [10, 11, 26, 27, 34, 7], [4, 11, 38, 51, 68, 5], [5, 12, 20, 24, 29, 4], [9, 14, 17, 18, 53, 6], [27, 35, 41, 56, 60, 16], [5, 8, 19, 34, 39, 26], [3, 9, 10, 20, 62, 25], [3, 8, 41, 56, 64, 18], [1, 24, 27, 31, 62, 20], [5, 25, 26, 40, 60, 1], [2, 12, 37, 56, 65, 21], [18, 19, 27, 28, 45, 9], [28, 35, 41, 47, 60, 3], [6, 47, 50, 61, 68, 4], [2, 21, 38, 61, 66, 12], [27, 33, 63, 66, 68, 9], [20, 24, 33, 39, 42, 21], [19, 26, 30, 39, 63, 13], [34, 50, 51, 61, 67, 20], [3, 4, 51, 53, 60, 6], [24, 33, 35, 37, 42, 21], [1, 12, 14, 24, 57, 7], [14, 21, 33, 39, 62, 20], [12, 25, 40, 59, 61, 26], [1, 28, 30, 34, 52, 6], [22, 26, 39, 47, 63, 12], [19, 22, 34, 66, 69, 5], [14, 24, 50, 59, 64, 2], [25, 27, 41, 53, 68, 2], [18, 21, 25, 46, 64, 21], [6, 15, 24, 67, 68, 11], [1, 4, 13, 35, 58, 24], [2, 27, 31, 44, 64, 18], [14, 16, 42, 48, 64, 14], [22, 24, 40, 52, 64, 10], [16, 34, 46, 55, 67, 14], [47, 54, 57, 60, 65, 19], [9, 35, 54, 63, 64, 1], [12, 26, 27, 43, 47, 5], [19, 30, 37, 44, 46, 22], [1, 7, 46, 47, 63, 7], [10, 12, 22, 36, 50, 4], [1, 12, 20, 33, 66, 21], [16, 27, 59, 62, 63, 23], [2, 21, 26, 40, 42, 9], [8, 11, 19, 24, 46, 5], [22, 30, 37, 44, 45, 18], [9, 25, 27, 53, 66, 5], [11, 19, 29, 63, 68, 25], [9, 14, 20, 23, 63, 1], [1, 26, 32, 46, 51, 13], [25, 38, 42, 66, 67, 19], [4, 13, 35, 61, 69, 4], [4, 6, 25, 55, 68, 26], [20, 22, 26, 28, 63, 5], [25, 30, 32, 33, 55, 20], [3, 4, 12, 22, 28, 16], [1, 25, 27, 38, 62, 13], [9, 11, 17, 19, 55, 1], [32, 34, 37, 39, 47, 3], [19, 21, 37, 50, 65, 26], [10, 15, 21, 67, 69, 3], [6, 13, 20, 35, 54, 22], [18, 42, 44, 62, 65, 23], [23, 24, 33, 51, 64, 5], [2, 11, 48, 58, 65, 13], [10, 25, 27, 34, 38, 2], [3, 16, 40, 48, 60, 14], [3, 4, 12, 28, 49, 25], [25, 27, 36, 37, 63, 7], [7, 10, 11, 13, 24, 24], [5, 8, 9, 17, 41, 21], [2, 9, 43, 55, 57, 18], [23, 35, 45, 66, 67, 20], [2, 24, 34, 53, 58, 13], [7, 23, 24, 32, 43, 18], [17, 24, 48, 62, 68, 23], [15, 26, 31, 38, 61, 3], [4, 17, 35, 49, 61, 8], [19, 25, 34, 57, 68, 4], [6, 28, 39, 43, 54, 12], [2, 38, 44, 50, 62, 19], [5, 11, 33, 35, 63, 14], [36, 39, 52, 57, 69, 1], [2, 12, 45, 61, 64, 26], [3, 20, 36, 42, 64, 4], [2, 3, 16, 23, 68, 7], [21, 32, 42, 46, 50, 4], [16, 21, 29, 53, 66, 2], [2, 31, 45, 46, 49, 20], [15, 45, 64, 67, 68, 18], [2, 4, 54, 61, 62, 14], [21, 33, 35, 62, 64, 24], [24, 38, 39, 48, 56, 4], [12, 21, 44, 50, 58, 26], [9, 38, 48, 52, 68, 25], [17, 23, 32, 38, 63, 23], [18, 34, 37, 45, 51, 14], [1, 26, 28, 55, 58, 25], [3, 15, 20, 23, 46, 11], [21, 24, 33, 55, 69, 3], [15, 20, 33, 36, 43, 12], [31, 39, 47, 51, 53, 6], [21, 26, 30, 45, 47, 23], [3, 38, 55, 61, 66, 1], [16, 53, 54, 57, 65, 8], [2, 15, 30, 35, 49, 6], [19, 21, 55, 66, 68, 3], [17, 36, 47, 63, 68, 25], [4, 11, 21, 38, 64, 11], [23, 25, 35, 63, 64, 25], [1, 33, 34, 56, 59, 18], [9, 36, 41, 44, 59, 4], [9, 10, 36, 46, 52, 14], [11, 22, 24, 51, 60, 18], [3, 5, 9, 42, 52, 11], [16, 30, 31, 54, 68, 1], [11, 19, 21, 29, 52, 17], [4, 9, 24, 46, 66, 7], [19, 26, 36, 43, 58, 14], [15, 17, 18, 47, 57, 19], [27, 28, 37, 50, 57, 5], [1, 27, 32, 47, 67, 14], [14, 20, 30, 54, 69, 11], [16, 18, 33, 37, 50, 8], [3, 10, 24, 46, 63, 4], [11, 20, 33, 43, 58, 24], [26, 27, 43, 61, 69, 4], [2, 13, 29, 58, 69, 4], [10, 16, 18, 40, 66, 16], [2, 9, 28, 36, 53, 4], [16, 28, 49, 51, 55, 23], [11, 24, 58, 66, 67, 26], [11, 19, 39, 44, 65, 7], [3, 17, 26, 38, 54, 15], [8, 21, 31, 32, 37, 23], [31, 32, 54, 60, 63, 12], [17, 26, 37, 61, 65, 2], [10, 23, 30, 54, 65, 11], [52, 58, 59, 64, 66, 9], [5, 11, 22, 23, 69, 7], [2, 8, 15, 19, 58, 10], [31, 43, 58, 59, 66, 9], [1, 4, 12, 36, 49, 5], [2, 18, 23, 27, 47, 15], [9, 17, 20, 38, 40, 18], [12, 31, 47, 58, 60, 23], [5, 14, 19, 46, 64, 22], [6, 15, 22, 42, 47, 26], [4, 14, 33, 39, 61, 3], [24, 26, 39, 47, 57, 23], [4, 8, 46, 47, 48, 5], [18, 43, 48, 60, 69, 14], [35, 36, 44, 45, 67, 14], [12, 32, 56, 67, 68, 26], [7, 9, 12, 31, 62, 22], [18, 37, 44, 50, 64, 11], [26, 32, 38, 45, 56, 1], [17, 41, 47, 60, 61, 17], [17, 37, 46, 54, 67, 8], [12, 15, 24, 34, 59, 14], [7, 37, 55, 65, 67, 12], [33, 56, 64, 66, 68, 12], [36, 51, 59, 66, 68, 25], [16, 31, 50, 55, 61, 9], [9, 23, 47, 49, 68, 19], [6, 28, 44, 59, 61, 21], [35, 45, 47, 54, 55, 14], [6, 13, 33, 36, 37, 7], [4, 19, 24, 47, 66, 10], [29, 30, 32, 48, 50, 20], [15, 30, 47, 50, 51, 3], [1, 2, 31, 39, 66, 25], [1, 6, 40, 51, 67, 2], [7, 28, 62, 63, 64, 10], [28, 34, 51, 53, 56, 11], [19, 35, 53, 54, 67, 21], [16, 20, 44, 57, 58, 6], [7, 14, 24, 30, 56, 7], [10, 33, 41, 47, 56, 10], [28, 45, 53, 56, 69, 20], [2, 11, 22, 35, 60, 23], [13, 19, 36, 39, 59, 13], [19, 31, 40, 46, 57, 23], [19, 36, 37, 46, 56, 24], [18, 23, 35, 45, 54, 16], [19, 25, 48, 55, 60, 18], [6, 8, 15, 27, 42, 10], [19, 30, 36, 46, 60, 25], [32, 37, 40, 58, 62, 15], [14, 30, 41, 42, 59, 6], [3, 6, 11, 17, 22, 11], [13, 43, 53, 60, 68, 5], [26, 30, 33, 37, 62, 6], [2, 16, 22, 55, 63, 22], [8, 21, 22, 65, 69, 26], [6, 10, 24, 33, 67, 11], [13, 20, 31, 33, 59, 20], [3, 9, 21, 24, 29, 14], [6, 33, 34, 45, 54, 7], [7, 15, 36, 46, 67, 7], [5, 25, 36, 51, 61, 1], [9, 10, 20, 22, 52, 25], [6, 14, 16, 34, 66, 25], [38, 42, 56, 68, 69, 4], [3, 16, 30, 33, 36, 20], [4, 7, 32, 55, 64, 25], [18, 27, 49, 65, 69, 9], [7, 8, 19, 24, 28, 1], [13, 36, 43, 61, 69, 18], [2, 18, 56, 60, 65, 14], [6, 24, 35, 37, 44, 22], [12, 27, 34, 55, 67, 9], [5, 9, 11, 16, 66, 7], [23, 28, 41, 50, 55, 24], [20, 24, 47, 50, 63, 5], [19, 24, 35, 43, 62, 2], [29, 44, 59, 61, 68, 19], [32, 45, 51, 57, 58, 12], [8, 15, 46, 56, 68, 3], [9, 21, 56, 57, 66, 11], [15, 21, 31, 36, 65, 16], [4, 17, 57, 58, 68, 12], [1, 25, 44, 55, 57, 26], [25, 37, 38, 39, 65, 5], [39, 41, 54, 59, 62, 12], [10, 20, 23, 49, 65, 22], [14, 34, 36, 50, 58, 5], [3, 18, 23, 32, 57, 21], [22, 23, 36, 47, 63, 2], [4, 26, 34, 37, 52, 9], [14, 22, 42, 46, 52, 24], [32, 36, 49, 62, 69, 13], [15, 16, 24, 31, 56, 4], [9, 10, 37, 59, 62, 26], [8, 40, 49, 58, 63, 14], [11, 13, 18, 30, 37, 16], [6, 12, 20, 27, 32, 4], [6, 10, 31, 48, 56, 12], [3, 44, 61, 63, 69, 13], [10, 19, 40, 45, 58, 25], [19, 28, 41, 42, 51, 7], [2, 27, 42, 44, 51, 25], [18, 20, 26, 53, 69, 5], [22, 39, 43, 62, 64, 7], [2, 10, 35, 44, 46, 4], [14, 16, 36, 52, 60, 16], [11, 41, 56, 57, 63, 2], [27, 28, 51, 68, 69, 22], [2, 39, 50, 61, 66, 15], [19, 28, 39, 42, 57, 17], [1, 33, 37, 39, 42, 26], [14, 15, 25, 52, 58, 11], [40, 41, 58, 64, 65, 17], [7, 15, 22, 36, 64, 13], [6, 40, 41, 45, 52, 9], [5, 7, 61, 63, 69, 18], [18, 30, 35, 52, 56, 5], [4, 5, 6, 28, 67, 10], [37, 39, 55, 63, 69, 23], [18, 27, 33, 39, 44, 8], [14, 21, 37, 44, 63, 1], [11, 36, 61, 62, 68, 4], [12, 18, 20, 39, 61, 10], [10, 39, 47, 49, 56, 8], [20, 30, 45, 55, 56, 14], [8, 33, 55, 59, 62, 18], [15, 21, 32, 62, 65, 26], [14, 16, 41, 63, 68, 26], [5, 7, 24, 31, 34, 4], [6, 16, 31, 62, 66, 18], [6, 42, 45, 47, 64, 18], [2, 32, 39, 46, 69, 6], [6, 28, 47, 58, 59, 18], [3, 7, 21, 31, 37, 11], [11, 18, 39, 58, 62, 3], [2, 10, 50, 59, 61, 6], [31, 32, 37, 38, 48, 24], [1, 15, 26, 63, 65, 16], [8, 9, 18, 48, 52, 6], [3, 28, 34, 35, 58, 17], [21, 28, 32, 44, 49, 6], [19, 20, 37, 39, 61, 8], [13, 22, 34, 51, 67, 10], [10, 43, 55, 59, 67, 2], [8, 23, 37, 52, 63, 13], [19, 37, 48, 61, 63, 12], [7, 21, 39, 47, 55, 19], [15, 32, 36, 48, 64, 19], [6, 17, 21, 35, 64, 18], [2, 36, 37, 45, 69, 3], [3, 10, 15, 33, 42, 11], [22, 30, 40, 42, 48, 16], [16, 25, 27, 49, 55, 17], [8, 10, 21, 41, 62, 7], [2, 17, 33, 51, 63, 26], [5, 15, 38, 47, 65, 10], [5, 16, 27, 39, 61, 24], [18, 29, 33, 62, 63, 15], [10, 15, 51, 61, 69, 14], [2, 15, 38, 54, 65, 11], [4, 11, 38, 49, 69, 16], [11, 29, 30, 47, 53, 16], [8, 14, 33, 36, 67, 17], [11, 15, 43, 55, 61, 10], [9, 24, 35, 46, 65, 22], [3, 18, 37, 51, 59, 13], [12, 21, 22, 30, 33, 24], [14, 17, 18, 21, 27, 9], [20, 21, 36, 60, 65, 13], [6, 14, 25, 33, 46, 17], [2, 13, 32, 33, 48, 22], [6, 12, 39, 48, 50, 7], [2, 6, 9, 33, 39, 11], [36, 38, 45, 62, 64, 19], [27, 29, 45, 55, 58, 2], [7, 16, 19, 48, 68, 15], [2, 13, 23, 34, 66, 2], [2, 6, 24, 51, 61, 1], [19, 20, 40, 42, 59, 15], [10, 30, 37, 53, 59, 4], [3, 25, 44, 53, 64, 10], [3, 7, 33, 50, 69, 24], [3, 21, 38, 50, 59, 6], [10, 40, 45, 56, 67, 2], [12, 15, 38, 57, 63, 24], [18, 26, 28, 38, 47, 17], [8, 32, 55, 64, 66, 10], [10, 16, 32, 63, 65, 17], [7, 20, 29, 38, 67, 22], [40, 43, 48, 59, 69, 19], [3, 16, 48, 52, 60, 1], [5, 31, 34, 51, 53, 23], [8, 15, 26, 35, 45, 9], [19, 25, 43, 46, 48, 14], [21, 46, 47, 57, 62, 8], [8, 30, 48, 57, 64, 9], [1, 2, 24, 50, 57, 26], [9, 25, 34, 44, 45, 8], [5, 23, 28, 43, 56, 19], [3, 6, 26, 35, 51, 17], [10, 27, 29, 44, 58, 24], [10, 30, 51, 57, 63, 20], [7, 29, 36, 41, 43, 5], [30, 32, 48, 53, 63, 12], [30, 31, 41, 42, 48, 3], [23, 29, 47, 59, 60, 15], [11, 20, 33, 39, 65, 24], [12, 17, 30, 45, 62, 5], [1, 17, 52, 58, 64, 1], [12, 22, 54, 66, 69, 15], [28, 38, 42, 47, 52, 1], [2, 7, 11, 17, 32, 11], [21, 22, 39, 44, 60, 12], [22, 23, 37, 62, 63, 19], [20, 40, 47, 55, 63, 5], [37, 51, 54, 58, 60, 19], [5, 36, 39, 45, 57, 11], [1, 4, 18, 46, 62, 25], [37, 40, 50, 61, 63, 21], [20, 31, 38, 40, 49, 21], [9, 22, 41, 47, 61, 21], [11, 20, 22, 33, 54, 24], [32, 35, 40, 52, 54, 1], [10, 20, 29, 48, 51, 17], [3, 15, 45, 51, 61, 8], [12, 22, 26, 46, 59, 26], [27, 39, 54, 56, 59, 24], [17, 36, 47, 60, 61, 15], [16, 28, 36, 39, 59, 4], [35, 36, 51, 55, 61, 26], [6, 21, 49, 65, 67, 18], [12, 18, 20, 29, 30, 16], [7, 24, 36, 54, 60, 23], [5, 21, 32, 36, 58, 14], [1, 21, 22, 34, 47, 4], [25, 30, 53, 59, 60, 5], [1, 4, 11, 59, 67, 10], [27, 28, 44, 67, 68, 11], [15, 22, 38, 54, 66, 3], [33, 46, 52, 59, 62, 10], [1, 5, 29, 54, 62, 3], [8, 21, 30, 49, 57, 8], [26, 40, 41, 55, 65, 24], [24, 29, 50, 65, 66, 14], [8, 31, 39, 43, 60, 17], [13, 20, 40, 51, 63, 1], [4, 22, 35, 38, 39, 20], [19, 29, 34, 44, 50, 25], [8, 25, 34, 38, 41, 10], [19, 28, 46, 50, 54, 9], [44, 52, 54, 64, 69, 26], [6, 7, 11, 66, 67, 19], [11, 13, 22, 27, 46, 20], [2, 8, 21, 34, 62, 16], [3, 19, 27, 37, 40, 8], [11, 13, 55, 56, 69, 4], [4, 10, 37, 39, 69, 24], [1, 19, 20, 38, 54, 17], [12, 17, 20, 21, 26, 8], [16, 23, 28, 40, 63, 1], [35, 36, 47, 61, 63, 3], [16, 18, 35, 39, 53, 21], [22, 36, 48, 59, 61, 22], [21, 25, 32, 63, 67, 6], [10, 21, 26, 41, 49, 25], [13, 30, 33, 45, 61, 14], [14, 16, 23, 50, 53, 3], [27, 35, 39, 51, 66, 16], [1, 12, 17, 39, 53, 5], [3, 10, 44, 55, 68, 24], [6, 14, 38, 39, 65, 6], [4, 9, 17, 27, 38, 18], [1, 6, 22, 42, 61, 4], [34, 38, 42, 61, 62, 19], [5, 11, 51, 56, 61, 2], [17, 18, 37, 44, 53, 18], [11, 31, 50, 52, 58, 18], [21, 40, 44, 50, 55, 16], [2, 28, 31, 44, 52, 18], [4, 33, 43, 53, 65, 21], [4, 8, 22, 32, 58, 4], [1, 15, 21, 32, 46, 1], [20, 28, 33, 63, 68, 20], [15, 39, 58, 63, 67, 7], [1, 16, 48, 49, 65, 8], [5, 37, 40, 64, 66, 5], [1, 2, 7, 52, 61, 4], [17, 33, 35, 42, 52, 9], [5, 8, 17, 27, 28, 14], [40, 53, 60, 68, 69, 22], [14, 20, 39, 65, 67, 2], [4, 19, 23, 25, 49, 14], [14, 26, 38, 45, 46, 13], [1, 20, 22, 60, 66, 3], [3, 4, 11, 41, 67, 5]
]

num_dict = defaultdict(int)
pb_dict = defaultdict(int)
repeat_dict = defaultdict(int)
d_length = len(dataset)

# To create default dicts
for i in range(1, 69):
    num_dict[i] = 0

for i in range(1, 26):
    pb_dict[i] = 0

for i in range(0, 5):
    repeat_dict[i] = 0


def countNumbers(data_set):
    """ Returns the count of the first 5 numbers from each drawing and a seperate number count of just powerball numbers """

    for data in data_set:
        for n in data[:5]:
            num_dict[n] += 1
    for data in data_set:
        pb_dict[data[5]] += 1
    
    return num_dict, pb_dict
    

def analyze_ds_patterns(data_set):
    """ Analyzes the pattern of each drawing based on Low, Medium, and High numbers: l = 1 - 22  m = 23 - 46  h = 47 - 69  """
    
    patterns = {}
    for data in data_set:
        pattern = []
        s = ""

        for n in data:
            if n < 23:
                pattern.append('L')
            elif n >= 23 and n < 47:
                pattern.append('M')
            else:
                pattern.append('H')
        
        for e in pattern:
            s += e

        if s not in patterns:
            patterns[s] = 1
        else:
            patterns[s] += 1

    sorted_patterns = sorted(patterns.items(), key=lambda x: x[1], reverse=True)
    highest_pattern = sorted_patterns[0][0]
    print(f'This is the highest repeating pattern: {highest_pattern}')
    return patterns

      
def countRepeats(five, pb):
    """ Returns the top 10 numbers in the drawings and the top 5 powerball numbers from the drawings """

    sorted_items = sorted(five.items(), key=lambda x: x[1], reverse=True)
    sorted_pb = sorted(pb.items(), key=lambda x: x[1], reverse=True)
    top_10 = sorted_items[:10]
    top_5 = sorted_pb[:5]

    low_10 = sorted_items[-10:]
    low_10_pb = sorted_pb[-10:]
    top_10_list = [{key: round((value/d_length)*100)} for key, value in top_10]
    top_pb_list = [{key: round((value/d_length)*100)} for key, value in top_5]
    low_10_list = [{key: round((value/d_length)*100)} for key, value in low_10]
    low_pb_list = [{key: round((value/d_length)*100)} for key, value in low_10_pb]

    readingRepeats(top_10_list, top_pb_list, low_10_list, low_pb_list)
    analyze(top_10_list)
    analyze(low_10_list)
    return top_10_list, top_pb_list, low_10_list, low_pb_list


def readingRepeats(top_10_list, top_pb_list, low_10_list, low_pb_list):
    """ Returns a print out of the top 10 number, top 5 powerball numbers, the lowest 10 numbers and powerball numbers """

    output = "The top 10 numbers are: "
    for i in top_10_list:
        for key, value in i.items():
            output += f'{key}: {value}% | '
    print(output)

    output = "The top 5 powerball numbers are: "
    for i in top_pb_list:
        for key, value in i.items():
            output += f'{key}: {value}% | '
    print(output)

    output = "The lowest 10 numbers are: "
    for i in low_10_list:
        for key, value in i.items():
            output += f'{key}: {value}% | '
    print(output)

    output = "The lowest 10 powerball numbers are: "
    for i in low_pb_list:
        for key, value in i.items():
            output += f'{key}: {value}% | '
    print(output)


def analyze(top):
    top_list = []

    for i in top:
        for key, value in i.items():
            top_list.append(key)

    top_list = sorted(top_list)
    #print(top_list)
    analyzed_ds = analyze_ds(dataset, set(top_list), 'The top 10 numbers')
    print(f'Top 10 numbers usually only appear {analyzed_ds[0][0]} time(s) per drawing.')

    #return set(top_list)


def analyze_ds(data_set, top, pre):
    for data in data_set:
        count = 0
        for i in top: 
            if i in data:
                count += 1

        for key in repeat_dict:
            if count == key:
                repeat_dict[key] += 1
        
    sorted_nums = sorted(repeat_dict.items(), key=lambda x: x[1], reverse=True)

    print(f'{pre} appeared {sorted_nums[0][0]} times {sorted_nums[0][1]}/{d_length} times,')
    print(f'{pre} appeared {sorted_nums[1][0]} times {sorted_nums[1][1]}/{d_length} times,')
    print(f'{pre} appeared {sorted_nums[2][0]} times {sorted_nums[2][1]}/{d_length} times,')
    print(f'{pre} appeared {sorted_nums[3][0]} times {sorted_nums[3][1]}/{d_length} times,')
    print(f'{pre} appeared {sorted_nums[4][0]} times {sorted_nums[4][1]}/{d_length} times,')

    
    return sorted_nums

# Used for the analyzed_ds function:  gets the count of occurences of each number in the drawing and the powerball number
first_numbers, powerball = countNumbers(dataset)
analyze_ds_patterns(dataset)
countRepeats(first_numbers, powerball)

#top_10_list, top_pb_list, low_10_list, low_pb_list = countRepeats(first_numbers, powerball)
#readingRepeats(top_10_list, top_pb_list, low_10_list, low_pb_list)


""" 
# Used for the repeat_dict function
#top_10 = analyze(top_10_list)
#top_pb = analyze(top_pb_list)
repeat_dict_nums = analyze_ds(dataset, top_10)
print("type: ", type(repeat_dict_nums))
#sorted_nums = sorted(analyzed_ds.items(), key=lambda x: x[1], reverse=True)
print("Repeats: ", repeat_dict_nums)
repeat_dict_pb = analyze_ds(dataset, top_pb)
sorted_top_10 = sorted(repeat_dict_nums.items(), key=lambda x: x[1], reverse=True)
sorted_top_10_pb = sorted(repeat_dict_pb.items(), key=lambda x: x[1], reverse=True)
 """





""" print(f'These are the top 10 numbers in a list: {sorted(top_10)}')
print(f'These are the top powerballs in a list: {sorted(top_pb)}')
print(f'The Top 10 numbers were in a drawing {sorted_top_10[0][0]} time(s) for a total of {sorted_top_10[0][1]} times which is {(sorted_top_10[0][1]/d_length)*100}% of the time')
print(f'The Top 10 numbers were in a drawing {sorted_top_10[1][0]} time(s) for a total of {sorted_top_10[1][1]} times which is {(sorted_top_10[1][1]/d_length)*100}% of the time')
print(f'The Top 10 powerball were in a drawing {sorted_top_10_pb[0][0]} time(s) for a total of {sorted_top_10_pb[0][1]} times which is {(sorted_top_10_pb[0][1]/d_length)*100}% of the time')

print(sorted_top_10) """

#print(count_dict)
#
#analyze(top_10_list)
#analyze_ds(dataset)
#